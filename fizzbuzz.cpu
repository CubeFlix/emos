# Fizzbuzz

# Data section
[.data]

# Current number
[num] [1]

# "Fizzbuzz"
[fizzbuzzstring] ["Fizzbuzz\n"]

# "Fizz"
[fizzstring] ["Fizz\n"]

# "Buzz"
[buzzstring] ["Buzz\n"]

# Code section
[.code]

# Imports
<ISLIB>

# Beginning loop
[beginloop]

# Divide by 15
DIV MEM[SYM[num] : [0x4]], [1d15], R[RAX], R[RBX]

# Check for Fizzbuzz
CMP R[RBX], [0x0]
JE SYM[fizzbuzz]

# Divide by 3
DIV MEM[SYM[num] : [0x4]], [1d3], R[RAX], R[RBX]

# Check for Fizz
CMP R[RBX], [0x0]
JE SYM[fizz]

# Divide by 5
DIV MEM[SYM[num] : [0x4]], [1d5], R[RAX], R[RBX]

# Check for Buzz
CMP R[RBX], [0x0]
JE SYM[buzz]

# Else, write number
MOV R[R9], MEM[SYM[num] : [0x4]]
LIB [0x0], [0x0]
EIR
PUSHN ["\n"]
MOV R[RAX], [1]
ADD R[RBX], [0x1], R[RBX]
MOV R[RCX], R[RBX]
SUB U[ES], R[RBX], R[RBX]
SYS
EIR
POPNR R[RCX]
JMP SYM[loop]

# Fizzbuzz
[fizzbuzz]
MOV R[RAX], [1]
MOV R[RBX], SYM[fizzbuzzstring]
MOV R[RCX], [9]
SYS
EIR
JMP SYM[loop]

# Fizz
[fizz]
MOV R[RAX], [1]
MOV R[RBX], SYM[fizzstring]
MOV R[RCX], [5]
SYS
EIR
JMP SYM[loop]

# Buzz
[buzz]
MOV R[RAX], [1]
MOV R[RBX], SYM[buzzstring]
MOV R[RCX], [5]
SYS
EIR
JMP SYM[loop]

# Loop
[loop]

# Increment num
ADD MEM[SYM[num] : [0x4]], [0x1], MEM[SYM[num] : [0x4]]

# Compare num to 20
CMP MEM[SYM[num] : [0x4]], [1d20]
JE SYM[end]
JNE SYM[beginloop]

# End
[end]

HLT [0x0]